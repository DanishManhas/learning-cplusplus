#include <iostream>
#include <cstring>
using namespace std;
#define CAPACITY 50000 // Size of the HashTable.

unsigned long hash_function(char *str) // Essentially using a pointer to create a c style dynamic string. An array instead could only
                                       // static
{
    unsigned long i = 0;

    for (int j = 0; str[j]; j++)
        i += str[j];

    return i % CAPACITY;
}

// Defines the HashTable item.
typedef struct
{
    char *key;
    char *value;
} Ht_item;

// Defines the HashTable.
typedef struct
{
    // Contains an array of pointers to items.
    Ht_item **items;
    int size;
    int count;
} HashTable;

// Enter a key value pair in the hashtable and return a pointer to it
Ht_item *create_item(char *key, char *value)
{
    // Allocate memory for one single item of type Ht_item
    Ht_item *item = (Ht_item *)malloc(sizeof(Ht_item)); // malloc returns a pointer to void type which must be typecasted to Ht_item type
    // Allocate space for key
    item->key = (char *)malloc(strlen(key) + 1);
    // Allocate space for value
    (*item).key = (char *)malloc(strlen(value) + 1); // Equivalent to the array operator above
    strcpy(item->key, key);
    strcpy((*item).value, value);
    return item;
}

int main()
{
    char *inputString;
    char testString[5] = "hmac";
    long hash;
    cout << "Type a string \n";
    cin >> inputString;
    cout << "You typed \t" << inputString << "\n";
    hash = hash_function(inputString);
    cout << " The hash generated by " << inputString << " is " << hash << "\n";
    // hash_function(testString[]);
}